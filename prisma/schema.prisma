
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  DEMO
  TEMPORARY
}

model User {
  id         String      @id 
  createdAt  DateTime    @default(now()) @map("created_at")
  username   String      @unique
  password   String      @map("password_hash")
  files      File[]
  buyers     UserBuyer[]
  sales      Sale[]
  items      Item[]  
  role       Role        @default(TEMPORARY)

  @@map("users")
}

model File {
  hash       String 
  owner      User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String      @map("owner_id")
  uploadDate DateTime    @default(now()) @map("upload_date")
  startDate  DateTime    @map("start_date")
  endDate    DateTime    @map("end_date")
  sales      Sale[]
  buyers     UserBuyer[]
  items      Item[]

  @@id([hash, ownerId])
  @@map("files")
}

model Sale {
  id              String   
  dateOfSale      DateTime @map("date_of_sale")
  timeOfSale      Int      @map("time_of_sale_hours")
  customShipPrice Decimal  @map("custom_shipping_price")
  uspsCost        Decimal  @map("USPS_buyer_cost")
  paymentFee      Decimal  @map("payment_fee")
  paymentMethod   String   @map("payment_method")
  items           Item[] 
  bundle          Boolean  @default(false)  
  total           Decimal? 
  buyer           Buyer    @relation(fields: [buyerId], references: [username])
  buyerId         String   @map("buyer_id")
  refund          Decimal  @map("buyer_refund")
  feeRefund       Decimal  @map("fees_refund")
  file            File     @relation(fields: [fileId, userId], references: [hash, ownerId], onDelete: Cascade)
  fileId          String   @map("file_id")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @map("user_id")

  @@id([id, userId])
  @@map("sales")
}

model Item {
  id            String
  dateOfListing DateTime @map("date_of_listing")
  price         Decimal  
  brand         String
  descLength    Int      @map("description_length")
  size          String?
  category      String
  itemFee       Decimal  @map("item_fee")
  boostFee      Decimal  @map("boosting_fee")
  sale          Sale     @relation(fields: [saleId, userId], references: [id, userId])
  saleId        String   @map("sale_id")
  file          File     @relation(fields: [fileId, userId], references: [hash, ownerId], onDelete: Cascade)
  fileId        String   @map("file_id")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @map("user_id")

  @@id([id, userId])
  @@map("items") 
}

model Buyer {
  username       String          @id        
  buyerLocations BuyerLocation[] 
  bought         Sale[]
  users          UserBuyer[]     

  @@map("buyers")
}

model Location {
  country        String  @id
  buyerLocations BuyerLocation[]

  @@map("locations")
}

model BuyerLocation {
  username String
  country  String
  location Location @relation(fields: [country], references: [country], onDelete: Cascade)
  buyer    Buyer    @relation(fields: [username], references: [username], onDelete: Cascade)

  @@id([username, country]) 
  @@map("buyer_locations")
}

model UserBuyer {
  fileId   String @map("file_id")
  userId   String @map("user_id")
  buyerId  String @map("buyer_id")
  file     File   @relation(fields: [fileId, userId], references: [hash, ownerId], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  buyer    Buyer  @relation(fields: [buyerId], references: [username])

  @@id([userId, buyerId])
  @@index([buyerId])
  @@map("user_buyers")
}